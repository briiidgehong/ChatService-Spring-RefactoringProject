<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">


    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url"
                  value="jdbc:mysql://localhost:3306/chattingapp?characterEncoding=UTF-8&amp;serverTimezone=UTC" />
        <property name="username" value="briiidgehong" />
        <property name="password" value="0000" />
    </bean>

    <!-- mybatis SqlSessionFactoryBean -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:mybatis/mybatisConfig.xml"></property>
    </bean>
    <!--
    SqlSession sqlSession = sqlSessionFactory.openSession();

    @Autowired
	public UserDAO(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	위의 DI 가 가능하도록 sqlSession Template bean 생성
    -->
    <bean class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSession"/>
    </bean>

    <!-- 해당 package 안에 있는 클래스를 scan 해서 annotation(@component:controller,service ''')이 있는 애들을 ioc(memory) 에 올린다.
    특정 패키지 안의 클래스들을 스캔하고, Annotation을 확인 후 bean 인스턴스를 생성한다.
    @Component @Controller @Service @Repository 등의 Annotation이 존재해야 bean을 생성할 수 있다.
    이것의 장점 중 하나는 @Autowired와 @Qualifier Annotation을 인식할 수 있다.
    component-scan을 선언했다면 context:annotation-config를 선언할 필요가 없다. -->
    <context:component-scan base-package="board, chat, user, index"/>

    <!--@RequestMapping
Spring MVC가 @Controller에 요청을 보내기 위해 필요한 HandlerMapping과 HandlerAdapter를 bean으로 등록한다.
컨트롤러(@Controller)에서는 @RequestMapping, @ExceptionHandler 등과 같은 주석을 통해 해당 기능을 사용할 수 있도록 한다.
이렇게 등록된 bean에 의해 요청 url과 컨트롤러를 매칭할 수 있다. -->
    <mvc:annotation-driven/>
</beans>